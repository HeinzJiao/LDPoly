# config.yaml
# ----------------------------------------
# 模型配置文件（用于提取道路mask与顶点heatmap）
#
# 1. 数据加载器：使用 ldm/data/shanghai_building_mask_vertex_heatmap.py 加载数据。
#
# 2. 图片条件：使用 autoencoder 得到的 image latent vector 作为条件输入。
#
# 3. 融合方式：将 latent building mask、latent vertex heatmap 和 latent image
#    通过 PreConvConat_ChannelEmbed 融合起来。
#
# 4. 模型文件：模型实现位于：
#    ldm/models/diffusion/ddpm_building_mask_vertex_heatmap.py;
#    ldm/modules/diffusionmodules/openaimodel_PreConvConat_ChannelEmbed.py。
# ----------------------------------------
model:
  base_learning_rate: 1e-5   # ori: 5e-5
  target: ldm.models.diffusion.ddpm_building_mask_vertex_heatmap.LatentDiffusion
  params:
    num_classes: 2
    l_simple_mask_weight: 1.
    l_simple_heat_weight: 0.5
    l_x0_mask_weight: 1.
    l_x0_heat_weight: 0.5
    linear_start: 0.0015
    linear_end: 0.0155
    num_timesteps_cond: 1
    log_every_t: 200
    timesteps: 1000
    loss_type: l1
    first_stage_key: ["segmentation", "heatmap"]
    cond_stage_key: "image"
    conditioning_key: "concat"
    image_size: 32
    channels: 4
    cond_stage_trainable: True    # modified
    use_pretrained_backbone: False
    concat_mode: True
    scale_by_std: True
    use_ema: True
    monitor: 'every_10_epochs'
    #ckpt_path: "models/ldm/lsun_churches256/model.ckpt"

    scheduler_config: # 10000 warmup steps
      target: ldm.lr_scheduler.LambdaLinearScheduler
      params:
        warm_up_steps: [10000]
        cycle_lengths: [10000000000000]
        f_start: [1.e-6]
        f_max: [1.]
        f_min: [ 1.]

    unet_config:
      target: ldm.modules.diffusionmodules.openaimodel_PreConvConat_ChannelEmbed.UNetModel
      params:
        image_size: 32
        in_channels: 12  # tripled for concat-mode (seg + heatmap + image)
        out_channels: 8  # (seg + heatmap)
        model_channels: 192
        attention_resolutions: [ 1, 2, 4, 8 ]   # 32, 16, 8, 4
        num_res_blocks: 2
        channel_mult: [ 1,2,2,4,4 ]  # 32, 16, 8, 4, 2
        num_heads: 8
        use_scale_shift_norm: True
        resblock_updown: True
        dropout: 0.2
        use_spatial_transformer: False

    backbone_config: # ***custom pretrained backbone
      MODEL:
        NAME: "HRNet48v2"
        HEAD_SIZE: [ [ 2 ] ]
        OUT_FEATURE_CHANNELS: 256

    first_stage_config:
      target: ldm.models.autoencoder.AutoencoderKL
      params:
        embed_dim: 4
        monitor: "val/rec_loss"
        ckpt_path: "models/first_stage_models/kl-f8/model.ckpt"
        ddconfig:
          double_z: True
          z_channels: 4
          resolution: 256
          in_channels: 3
          out_ch: 3
          ch: 128
          ch_mult: [ 1,2,4,4 ]  # num_down = len(ch_mult)-1
          num_res_blocks: 2
          attn_resolutions: [ ]
          dropout: 0.0
        lossconfig:
          target: torch.nn.Identity

    cond_stage_config:
      target: ldm.modules.encoders.modules.AEEncoderEmbedder
      params:
        ckpt_path: "models/first_stage_models/kl-f8/model.ckpt"
        embed_dim: 4
        double_z: True
        z_channels: 4
        resolution: 256
        in_channels: 3
        out_ch: 3
        ch: 128
        ch_mult: [ 1,2,4,4 ]  # num_down = len(ch_mult)-1
        num_res_blocks: 2
        attn_resolutions: [ ]
        dropout: 0.2
data:
  target: main.DataModuleFromConfig
  params:
    batch_size: 4
    num_workers: 8
    wrap: False
    train:
      target: ldm.data.shanghai_building_mask_vertex_heatmap.DeventerRoadTrain
      params:
        size: 256
    validation:
      target: ldm.data.shanghai_building_mask_vertex_heatmap.DeventerRoadValidation
      params:
        size: 256
    test:
      target: ldm.data.shanghai_building_mask_vertex_heatmap.DeventerRoadTest
      params:
        size: 256

lightning:
  callbacks:
    image_logger:
      target: main.ImageLogger
      params:
        batch_frequency: 10000 # 2000
        max_images: 8
        increase_log_steps: True
        log_dice_frequency: 1000000

  trainer:
    benchmark: True
    check_val_every_n_epoch: 50  # val is test now
    accumulate_grad_batches: 1